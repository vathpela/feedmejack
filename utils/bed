#!/usr/bin/python3

import os
import sys
import tty
import pdb
import time
import feedmejack as fmj
from feedmejack.utility import *
from decimal import Decimal

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings())
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_position_settings(label='start',
                                                  settings=settings)
    settings = fmj.settings.parse_position_settings(label='end',
                                                  settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": True,
              "debug": False,
              "dryrun": False,
              "step": clean(0.1),
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    mill = fmj.Mill(settings=settings)
    if not settings.dryrun:
        mill.reset()
        mill.setup()

    z_min = settings.end_z
    z_max = settings.start_z
    z_step = settings.step

    f = settings.feed
    r = clean(tool.width) / clean(2)
    w = clean(tool.width)

    if settings.debug:
        z_min += 10
        z_max += 10
        f *= 20

    x_range = [settings.start_x+r, settings.end_x-r]
    y_range = [settings.start_y+r, settings.end_y-r]

    coords = [
        [{'z':50}, mill.gcode.G0, None],
        [{'x':x_range[0], 'y': y_range[0], 'z':50}, mill.gcode.G0, None],
        [{'x':x_range[0], 'y': y_range[0], 'z':z_max+z_step},
            mill.gcode.G0, None],
        ]

    notch_x_range = [x_range[1], x_range[1] + Decimal(12.7)]
    notch_y_height = ((y_range[1] - y_range[0]) - Decimal(12.7)) / 2
    notch_y_range = [y_range[0] + notch_y_height, y_range[1] - notch_y_height]

    for z in frange(z_max, z_min, -z_step):
        # put a notch at the bottom for our error spot
        coords += [
            [{'z':z+z_step}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y': y_range[0]}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y': y_range[0]-4, 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[0], 'y': y_range[0], 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[0], 'y': y_range[0], 'z':z+z_step},
                mill.gcode.G0, None],
            ]

        fwd = True
        miniw = w * Decimal(0.90)
        # mill out the main box
        for y in frange(y_range[0], y_range[1], r):
            coords += [
                [{'z': z+z_step}, mill.gcode.G1, f*2],
                [{'x':x_range[0], 'y':y}, mill.gcode.G1, f*2],
                [{'x':x_range[1], 'y':y, 'z': z}, mill.gcode.G1, f*2],
                [{'x':x_range[0], 'y':y, 'z': z}, mill.gcode.G1, f*2],
                ]

        # run around the border once
        coords += [
            [{'z':z+z_step}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G0, None],
            [{'z':z}, mill.gcode.G1, f*2],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G1, f*2],
            [{'x':x_range[0], 'y':y_range[1]}, mill.gcode.G1, f*2],
            [{'x':x_range[1], 'y':y_range[1]}, mill.gcode.G1, f*2],
            [{'x':x_range[1], 'y':y_range[0]}, mill.gcode.G1, f*2],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G1, f*2],
            [{'z':z+z_step}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G0, None],
        ]

        # notch out the place for our dovetail bit
        for y in frange(notch_y_range[0], notch_y_range[1], r):
            coords += [
                [{'z':z+z_step}, mill.gcode.G0, None],
                [{'x':notch_x_range[0], 'y':y}, mill.gcode.G0, None],
                [{'x':notch_x_range[1], 'y':y, 'z':z}, mill.gcode.G1, f*2],
                [{'x':notch_x_range[0], 'y':y, 'z':z}, mill.gcode.G1, f*2],
                ]

        # clean the border of the notch
        coords += [
            [{'x':notch_x_range[0], 'y':notch_y_range[0], 'z':z},
                mill.gcode.G0, None],
            [{'x':notch_x_range[0], 'y':notch_y_range[1], 'z':z},
                mill.gcode.G0, None],
            [{'x':notch_x_range[1], 'y':notch_y_range[1], 'z':z},
                mill.gcode.G0, None],
            [{'x':notch_x_range[1], 'y':notch_y_range[0], 'z':z},
                mill.gcode.G0, None],
            [{'x':notch_x_range[0], 'y':notch_y_range[0], 'z':z},
                mill.gcode.G0, None],
            [{'z':z+z_step}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G0, None],
            ]

        coords += [
            [{'z':z_max+1}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G0, None],
            [{'z':z+z_step}, mill.gcode.G1, f],
            [{'x':x_range[0]-r, 'y':y_range[0]-r, 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[0], 'y':y_range[0]}, mill.gcode.G1, f],

            [{'z':z_max+1}, mill.gcode.G0, None],
            [{'x':x_range[0], 'y':y_range[1]}, mill.gcode.G0, None],
            [{'z':z+z_step}, mill.gcode.G1, f],
            [{'x':x_range[0]-r, 'y':y_range[1]+r, 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[0], 'y':y_range[1]}, mill.gcode.G1, f],

            [{'z':z_max+1}, mill.gcode.G0, None],
            [{'x':x_range[1], 'y':y_range[1]}, mill.gcode.G0, None],
            [{'z':z+z_step}, mill.gcode.G1, f],
            [{'x':x_range[1]+r, 'y':y_range[1]+r, 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[1], 'y':y_range[1]}, mill.gcode.G1, f],

            [{'z':z_max+1}, mill.gcode.G0, None],
            [{'x':x_range[1], 'y':y_range[0]}, mill.gcode.G0, None],
            [{'z':z+z_step}, mill.gcode.G1, f],
            [{'x':x_range[1]+r, 'y':y_range[0]-r, 'z':z}, mill.gcode.G1, f],
            [{'x':x_range[1], 'y':y_range[0]}, mill.gcode.G1, f],
            ]


    xz_variance = [0, -0.75]
    yz_variance = [0, -1.5]
    def adjust_z(x, y, z, debug=False):
        z = clean(z)
        if debug:
            print("x,y,z: (%s,%s,%s)" % (x,y,z))
        xzv = clean(Decimal(xz_variance[1]) - Decimal(xz_variance[0]))
        if debug:
            print("xzv: %s" % (xzv,))
        xzv *= Decimal(x)/Decimal(300)
        xzv = clean(xzv)
        if debug:
            print("xzv: %s" % (xzv,))

        yzv = clean(Decimal(yz_variance[1]) - Decimal(yz_variance[0]))
        if debug:
            print("yzv: %s" % (yzv,))
        yzv *= Decimal(y)/Decimal(300)
        yzv = clean(yzv)
        if debug:
            print("yzv: %s" % (yzv,))

        ret = clean(Decimal(z) + Decimal(sum([xzv, yzv])) / Decimal(2))
        if debug:
            print("ret z: %s" % (ret,))
        return ret

    cmds = []

    for (a,cmd,f) in coords:
        if 'x' in a and 'y' in a and 'z' in a:
            #a['z'] = adjust_z(**a)
            pass
        kwargs = {'end': a}
        if f:
            kwargs['f'] = f
        c = cmd(**kwargs)
        cmds.append(c)

    for cmd in cmds:
        print("%s" % (cmd,))
        if not settings.dryrun:
            mill.send(cmd)
            mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
    mill.end()
