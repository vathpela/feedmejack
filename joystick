#!/usr/bin/python3 -u

import os
import sys

class Wasteboard(object):
    def __init__(self, device):
        self.f = os.open(device, os.O_RDWR)
        self.x = 150
        self.y = 150
        self.z = 30
        self.feedrate=50

    def command(self, s):
        cmd = "%s\n" % (s,)
        os.write(self.f, cmd.encode('utf8'))

    def center(self):
        self.command("G0 Z30 F1000")
        self.gotoxyz(150, 150, 30, 1000)
        self.status()

    def gotoxyz(self, x, y, z, feedrate=None):
        if feedrate is None:
            feedrate = self.feedrate
        if feedrate is None:
            cmd = "G0 X%0.6f Y%0.6f Z%0.6f" % (x,y,z)
        else:
            cmd = "G1 X%0.6f Y%0.6f Z%0.6f F%d" % (x, y, z, feedrate)
        self.command(cmd)
        self.x = x
        self.y = y
        self.z = z

    def gotox(self, x, feedrate=None):
        self.gotoxyz(x, self.y, self.z, feedrate)

    def gotoy(self, y, feedrate=None):
        self.gotoxyz(self.x, y, self.z, feedrate)

    def gotoz(self, z, feedrate=None):
        self.gotoxyz(self.x, self.y, z, feedrate)

    def left(self, amt):
        self.gotox(self.x-amt)

    def right(self, amt):
        self.left(-amt)

    def back(self, amt):
        self.gotoy(self.y-amt)

    def forward(self, amt):
        self.back(-amt)

    def down(self, amt):
        self.gotoz(self.z-amt)

    def up(self, amt):
        self.down(-amt)

    def faster(self, amt):
        self.feedrate += amt

    def slower(self, amt):
        self.faster(-amt)

    def calibrate(self):
        self.command("G92 X150 Y150 Z30")
        self.x = 150
        self.y = 150
        self.z = 30
        self.status()

    def status(self):
        print("position: (%0.6f, %0.6f, %0.6f) feedrate: %d" % (self.x, self.y,
            self.z, self.feedrate))

if __name__ == '__main__':
    args = {
        'serial': '/dev/ttyACM0'
        }

    sys.argv = sys.argv[1:]

    def getval(char, string):
        arg = sys.argv[0]
        dashes = '--%s' % (string,)
        if arg == '-%c' % (char,):
            value = sys.argv[1]
            sys.argv = sys.argv[2:]
            args[string] = value
            return True
        elif arg.startswith(dashes):
            arg = arg[len(dashes):]
            if len(arg) > 0 and arg[0] == '=':
                value = arg[1:]
                sys.argv = sys.argv[1:]
            else:
                value = sys.argv[1]
                sys.argv = sys.argv[2:]
            args[string] = value
            return True
        return False

    while len(sys.argv) > 1:
        if getval('s', 'serial'):
            if args['serial'][0] != '/':
                args['serial'] = '/dev/%s' % (args['serial'],)
            continue

    wb = Wasteboard(args['serial'])

    wb.center()
    amts = {
        'c': (wb.calibrate, ),
        'a': (wb.left, 0.1),
        'A': (wb.left, 1),
        'd': (wb.right, 0.1),
        'D': (wb.right, 1.0),
        'w': (wb.forward, 0.1),
        'W': (wb.forward, 1.0),
        's': (wb.back, 0.1),
        'S': (wb.back, 1.0),
        'k': (wb.up, 0.1),
        'K': (wb.up, 1),
        'j': (wb.down, 0.1),
        'J': (wb.down, 1),
        '0': (wb.center,),
        '+': (wb.faster, 10),
        '-': (wb.slower, 10),
        '?': (wb.status,),
        }

    input = os.fdopen(sys.stdin.fileno(), 'r', 1)

    while True:
        x = input.read()
        try:
            amts[x][0](*amts[x][1:])
        except KeyError:
            if x != '\n':
                print("Invalid key '%s'" % (x,))
