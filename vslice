#!/usr/bin/python3

import sys
import feedmejack as fmj
import pdb
import pprint
import time
from decimal import Decimal as _Decimal

def frange(x, y, jump):
    while x < y:
        yield x
        x += jump

def make_shapes(lines):
    yield str(fmj.gcode.F(f=100))
    yield str(fmj.gcode.G0(end={'z':40}))
    yield str(fmj.gcode.G0(end={'x':150,'y':150,'z':40}))
    z_base = 0.2
    z = 40
    for i in range(0, len(lines)):
        line = lines[i]

        if line.xmin == line.xmax and line.ymin == line.ymax and line.zmin != line.zmax:
            z = z_base + line.zrange
            yield str(fmj.gcode.G1(end={'z':z}))
            continue

        if i == 0:
            go_to_start = True
        else:
            prev = lines[i-1]
            if prev.xy_max == line.xy_min:
                go_to_start = False
            else:
                go_to_start = True
        if go_to_start:
            yield str(fmj.gcode.G0(end={'z':10}))
            z = 10
            yield str(fmj.gcode.G0(end={'x':line.xmin,'y':line.ymin}))
            yield str(fmj.gcode.G1(end={'z':0.2}, f=100))
            z = 0.2
        yield str(fmj.gcode.G1(end={'x':line.xmax,'y':line.ymax}, f=100))
        if i == len(lines)-1:
            yield str(fmj.gcode.G1(end={'z':10}, f=100))
            z = 10

def status_cb(**kwds):
    items = []
    for x,y in kwds.items():
        x = x.strip()
        y = str(y).strip()
        i = "=".join([x, y])
        items.append(i)
    s = " ".join(items)
    #pdb.set_trace()
    if len(s) > 0:
        print("%s" % (s,))

def drawlines(face):
    lines = []
    next_faces = [face]
    lastline = None

    done = {}
    while next_faces:
        face = next_faces.pop(0)
        # try:
        #    faces.remove(face)
        #except ValueError:
        #    pass
        l = face.lineAtZ(slices[layer])
        if l:
            lines.append(l)
            # print("%s nf:%d d:%d" % (l, len(next_faces), len(done)))
            print("  %s" % (l, ))
        done[face] = 1
        try:
            next_faces.remove(face)
        except:
            pass

        continue
        for v in face._vertices:
            vertices.append(v)
        vertices.reverse()
        nvs = []
        # try to find the point from the previous line
        if lastline:
            for v in vertices:
                pass
        for i in range(0, len(vertices)-1):
            v0 = vertices[i]
            v0 = fmj.xyz.XY(v0.x, v0.y)
            v1 = vertices[i+1]
            v1 = fmj.xyz.XY(v1.x, v1.y)
            if v0 != v1:
                l = fmj.shapes.Line(v0, v1)
                print(" %s f:%d nf:%d d:%d" % (l, len(faces), len(next_faces), len(done)))

        for v in vertices:
            while lib._vertices[v]['faces']:
                newface = lib._vertices[v]['faces'].pop(0)
                if newface == face or newface in done:
                    try:
                        faces.remove(face)
                    except:
                        pass
                    continue
                next_faces.append(newface)

    return lines

def make_svg(output, lines):
    import svgwrite

    colors = [[100, 0,   0],
              [66,  0,  33],
              [33,  0,  66],
              [0,   0, 100],
              [0,  33,  66],
              [0,  66,  33],
              [0, 100,   0],
              [33, 66,   0],
              [33, 33,  33],
              [66, 33,   0]]

    dwg = svgwrite.Drawing(output, size=(300, 300))
    for line in lines:
        lx = float(line.xy_min.x)
        ly = float(line.xy_min.y)
        rx = float(line.xy_max.x)
        ry = float(line.xy_max.y)

        l = dwg.line((lx, ly), (rx, ry),
                     stroke=svgwrite.rgb(line.color[0], line.color[1], line.color[2], '%'))
        dwg.add(l)
    dwg.save()

coordcache = {}
scalecache = {}

once=False
def scale(vertex, min_x, max_x, min_y, max_y, min_z, minimum=0, maximum=300,
          x_shift=0, y_shift=0):
    if vertex in scalecache:
        return scalecache[vertex]

    upper = max(max_x, max_y)
    lower = min(min_x, min_y)
    upper = _Decimal(upper)
    lower = _Decimal(lower)
    maximum = _Decimal(maximum)
    minimum = _Decimal(minimum)

    # print("minimum: %f maximum: %f" % (minimum, maximum))
    m = 300 / (upper - lower)

    ax = _Decimal(150) - ((m * min_x + m * max_x) / 2)
    ay = _Decimal(150) - ((m * min_y + m * max_y) / 2)

    m *= _Decimal(maximum - minimum) / _Decimal(300)

    # middle_value = (m * upper - m * lower)
    #a = middle_limit - middle_value

    # a = middle - (m * upper - m * lower)
    #a = _Decimal(0)

    #if m * lower < 0:
    #    a = _Decimal(0) - m * lower

    #a = (_Decimal(300) - a) / 2

    # a = ((maximum - minimum) - (upper - lower)) / 2
    # a += 150
    # a = (upper - lower) / 2 - (maximum - minimum) / 2


    def prettify(n, m='1.000000'):
        n = _Decimal(n)
        m = _Decimal(m)
        n = n.normalize()
        n = n.quantize(m)
        return n

    x = prettify(vertex.x)
    y = prettify(vertex.y)
    z = prettify(vertex.z)

    if not x in coordcache:
        coordcache[x] = x
    x = coordcache[x]

    if not y in coordcache:
        coordcache[y] = y
    y = coordcache[y]

    if not z in coordcache:
        coordcache[z] = z
    z = coordcache[z]

    x = _Decimal(x).fma(m, ax)
    y = _Decimal(y).fma(m, ay)
    z = _Decimal(z).fma(m, 0 - min_z)

    x_shift = _Decimal(x_shift)
    y_shift = _Decimal(y_shift)
    x = prettify(x + x_shift)
    y = prettify(y + y_shift)
    z = prettify(z)

    global once
    if not once:
        print("m:%f ax:%f ay:%f" % (m, ax, ay))
        print("m*xrange:%f..%f\nm*yrange:%f..%f" %
                (m*min_x,m*max_x,m*min_y,m*max_y))
        print("m*xrange+ax:%f..%f\nm*yrange+ay:%f..%f" %
                (m*min_x+ax,m*max_x+ax,m*min_y+ay,m*max_y+ay))
        once=True


    val = fmj.xyz.XYZ(x=x, y=y, z=z)
    scalecache[vertex] = val
    return val

def find_nearest_point(origin, points):
    nearest = 0
    points = list(points)
    for i in range(1, len(points)):
        if origin.distance(points[i]) < origin.distance(points[nearest]):
            nearest = i
    return points[nearest]

def find_nearest_line(origin, lines):
    nearest = None
    distance = 1000000000000000000
    for line in lines:
        points = list(line.points)
        dist = sum([origin.distance(p) for p in points]) / len(points)
        if dist < distance:
            distance = dist
            nearest = line
    return nearest


def do_slicing(obj, height, layer, tool):
    r = obj.zRange

    slices = list(frange(r[0], r[1], height))
    if layer > len(slices):
        sys.exit(0)
    z = slices[layer]
    # intentionally just doing faces that /directly/ intersect the bottom
    # of the layer, not just things that are in the distance between the top and
    # the bottom, or else we'd also have to figure out what height to draw our
    # intersecting line at
    obj = obj.zSlice(z=z)
    r = len(list(obj.faces))
    print("Initial faces: (%d of them)" % (r,))
    for face in obj.faces:
        print("  %s" % (face,))

    print("Drawing lines:")
    points = {}
    starting_point = None
    for face in obj.faces:
        line = face.lineAtZ(z)
        if starting_point is None:
            starting_point = line.xy_max
        points.setdefault(line.xy_min, [])
        if not line in points[line.xy_min] and \
           not line.reverse in points[line.xy_min]:
            points[line.xy_min].append(line)
        points.setdefault(line.xy_max, [])
        if not line in points[line.xy_max] and \
           not line.reverse in points[line.xy_max]:
            points[line.xy_max].append(line)

    init_lines = set()
    for lines in points.values():
        lineset = set(lines)
        init_lines = init_lines.union(lineset)
    init_lines = list(init_lines)

    print("Initial lines: (%d of them)" % (len(init_lines)))
    for line in init_lines:
        print("  %s" % (line,))

    print("point_dict: ")
    pprint.pprint(points)

    colors = [[100, 0, 0],
              [0, 100, 0],
              [0, 0, 100]]
    print("Making line list starting at %s" % (starting_point,))
    point = starting_point
    starting_line = None
    lines = []
    while points:
        if not point in points:
            if point == starting_point:
                # print("Got to starting point")
                # print("len(points): %d" % (len(list(points.keys()))))
                # pprint.pprint(points)
                if starting_line:
                    line = starting_line
                    starting_line = None
                    if point == line.xy_min:
                        point = line.xy_max
                        if point in points:
                            continue
                    elif point == line.xy_max:
                        point = line.xy_min
                        if point in points:
                            continue
                if not starting_line:
                    print("Got to starting point, inserting lift+place+drop")
                    old_point = point
                    above0 = fmj.xyz.XYZ(point.x, point.y, point.z + 30)
                    line = fmj.xyz.Line(point, above0)
                    print("  %s" % (line,))
                    line.color = [0,0,0]
                    lines.append(line)
                    point = find_nearest_point(point, points)
                    above1 = fmj.xyz.XYZ(point.x, point.y, point.z + 30)
                    line = fmj.xyz.Line(above0, above1)
                    print("  %s" % (line,))
                    line.color = [0,0,0]
                    lines.append(line)
                    line = fmj.xyz.Line(above1, point)
                    print("  %s" % (line,))
                    line.color = [0,0,0]
                    lines.append(line)
                    continue
            else:
                old_point = point
                point = find_nearest_point(point, points.keys())
                if old_point.distance(point) > 0.0001:
                    print("Expected point %s but not finding it; using %s" % (old_point, point))
                above0 = fmj.xyz.XYZ(point.x, point.y, point.z + 30)
                line = fmj.xyz.Line(point, above0)
                print("  %s" % (line,))
                line.color = [0,0,0]
                lines.append(line)
                above1 = fmj.xyz.XYZ(point.x, point.y, point.z + 30)
                line = fmj.xyz.Line(above0, above1)
                print("  %s" % (line,))
                line.color = [0,0,0]
                lines.append(line)
                line = fmj.xyz.Line(above1, point)
                print("  %s" % (line,))
                line.color = [0,0,0]
                lines.append(line)
                continue
        else:
            line = points[point].pop(0)
        if starting_line is None:
            starting_line = line
        if line.xy_min in points:
            try:
                points[line.xy_min].remove(line)
            except ValueError:
                pass
            if not points[line.xy_min]:
                del points[line.xy_min]
        if line.xy_max in points:
            try:
                points[line.xy_max].remove(line)
            except ValueError:
                pass
            if not points[line.xy_max]:
                del points[line.xy_max]
        if point == line.xy_max:
            line = line.reverse
        line.color = colors.pop(0)
        colors.append(line.color)
        lines.append(line)
        print("  %s" % (line,))
        point = line.xy_max

    return lines

if __name__ == '__main__':
    terminal='/dev/ttyACM0'
    def usage(retval):
        if retval == 0:
            out = sys.stdout
        else:
            out = sys.stderr
        out.write("usage: vslice <filename.obj> <slice> [height]\n")
        sys.exit(retval)

    helps = set(['--help','-?','-h','--usage'])
    if helps.intersection(set(sys.argv[1:])):
        usage(0)

    if "-o" in sys.argv:
        i = sys.argv.index('-o')
        sys.argv.pop(i)
        outfile = sys.argv.pop(i)
    else:
        outfile = None

    if "-c" in sys.argv:
        i = sys.argv.index("-c")
        sys.argv[i] = "--center"
    if "--center" in sys.argv:
        i = sys.argv.index("--center")
        sys.argv.pop(i)
        center_x = _Decimal(sys.argv.pop(i))
        center_y = _Decimal(sys.argv.pop(i))
    else:
        center_x = 150
        center_y = 150

    if "--svg" in sys.argv:
        sys.argv.remove("--svg")
        fmt = 'svg'
    else:
        fmt = 'gcode'

    if len(sys.argv) < 3 or len(sys.argv) > 4:
        usage(1)

    infile = open(sys.argv[1], "r")
    layer = int(sys.argv[2])
    try:
        height = int(sys.argv[3])
    except:
        height = 4

    # tool = list(fmj.tools.find_tool(max_width=6.35, min_length=27))[0]
    tool = list(fmj.tools.find_tool(max_width=3.175, min_length=13))[0]

    min_x = None
    max_x = None
    min_y = None
    max_y = None
    min_z = None
    obj = fmj.xyz.Object()
    vertices = []
    faces = []
    xs = []
    ys = []
    for line in infile.readlines():
        if line[0] == 'v':
            xyz = [_Decimal(x) for x in line[2:].split(' ')]
            if min_x is None or xyz[0] < min_x:
                min_x = xyz[0]
            if max_x is None or xyz[0] > max_x:
                max_x = xyz[0]
            if min_y is None or xyz[1] < min_y:
                min_y = xyz[1]
            if max_y is None or xyz[1] > max_y:
                max_y = xyz[1]
            if min_z is None or xyz[2] < min_z:
                min_z = xyz[2]
            vertices.append(xyz)
            xs.append(_Decimal(xyz[0]))
            ys.append(_Decimal(xyz[1]))
        elif line[0] == 'f':
            indices = [int(x) for x in line[2:].split(' ')]
            faces.append(indices)

    print("min(xs): %f max(xs): %f" % (min(xs),max(xs)))
    print("min(ys): %f max(ys): %f" % (min(ys),max(ys)))
    x_shift = (center_x - 150)
    y_shift = (center_y - 150)
    # middlex = (max(xs) + min(xs)) / 2
    # middley = (max(ys) + min(ys)) / 2
    # x_shift = _Decimal((150 - center_x) - (avgx / 2)) / _Decimal(2)
    # y_shift = _Decimal((150 - center_y) - (avgy / 2)) / _Decimal(2)
    # x_shift = (center_x - 150) - middlex
    # y_shift = (center_y - 150) - middley
    #print("middlex: %f middley: %f" % (middlex, middley))
    print("x_shift: %f y_shift: %f " % (x_shift, y_shift))
    print("scale: xrange:%f..%f yrange:%f..%f z offset %f" % (min_x, max_x,
        min_y, max_y, 0 - min_z))
    for xyz in vertices:
        old = fmj.xyz.XYZ(*xyz)
        new = scale(old, min_x, max_x, min_y, max_y, min_z, 90, 210,
                    x_shift=x_shift, y_shift=y_shift)
        # print("scale(%s) -> %s" % (old, new))
        obj.addVertex(new)

    for indices in faces:
        obj.addFace(*indices)

    r = obj.zRange
    slices = list(frange(r[0], r[1], height))
    print("layer %d is %f" % (layer, slices[layer]))

    lines = do_slicing(obj, height, layer, tool)
    del obj

    if 0:
        left = {}
        right = {}
        for line in lines:
            l = left.setdefault(line.xy_min, [])
            l.append(line)
            l = left.setdefault(line.xy_max, [])
            l.append(line)

        oldlines = lines
        lines = []
        line = None
        while oldlines:
            print("line: %s" % (line,))
            if line:
                if line in oldlines:
                    oldlines.remove(line)
                else:
                    nl = line.reverse
                    if nl in oldlines:
                        oldlines.remove(nl)
                other = fmj.xyz.Line(xy_min=line.xy_max, xy_max=newline.xy_min)
                if other in oldlines:
                    oldlines.remove(other)
            else:
                line = oldlines.pop(0)
            lines.append(line)
            print("lines: %d oldlines: %d" % (len(lines), len(oldlines)))
            print("left: %d" % (len(left.keys()),))

            if line.xy_max in left:
                nextlines = left[line.xy_max]
                if line in nextlines:
                    nextlines.remove(line)
            elif line.xy_min in left:
                nextlines = left[line.xy_min]
                if line in nextlines:
                    nextlines.remove(line)
            else:
                nextlines = []
            print("nextlines: %d" % (len(nextlines),))

            if line in nextlines:
                nextlines.remove(line)
            if line.reverse in nextlines:
                nextlines.remove(line.reverse)
            l = len(nextlines)
            if l == 0:
                print("%s has no right side connection (%d left)" % (line,
                    len(oldlines)))
                line = None
                #time.sleep(0.5)
                continue
            elif l > 1:
                print("%s has %d right side connections (%d left)" % (line, l,
                    len(oldlines)))
                for nl in nextlines:
                    print(" %s" % (nl,))
                newline = nextlines.pop(0)
                if len(nextlines) == 0:
                    del left[line.xy_max]
                else:
                    left[line.xy_max] = nextlines
            else:
                print("%s has %d right side connections (%d left)" % (line, l,
                    len(oldlines)))
                newline = nextlines.pop(0)
                if len(nextlines) == 0:
                    if line.xy_max in left:
                        del left[line.xy_max]
                    elif line.xy_min in left:
                        del left[line.xy_min]
                else:
                    left[line.xy_max] = nextlines
            if line.xy_max != newline.xy_min:
                newline = newline.reverse
            line = newline

    if outfile:
        if fmt == 'svg':
            make_svg(outfile, lines)
        else:
            output = make_shapes(lines)
            output = "\n".join(output) + "\n"
            f = open(outfile, "w")
            f.write(output)
            f.close()
        sys.exit(0)

    tool = list(fmj.tools.find_tool(max_width=6.35, min_length=27))[0]
    mill = fmj.Mill(terminal, status_cb, tool=tool)

    cmds = make_shapes(lines)

    status_cb(status=mill.status, wpos=mill.wpos)
    should_reset=False

    try:
        if should_reset:
            mill.reset()

        mill.setup()
    except KeyboardInterrupt:
        signal.alarm(0)
        raise
    except fmj.Timeout:
        pass
    except:
        raise

    mill.get_status()

    mill.get_status()
    status_cb(status=mill.status, wpos=mill.wpos)

    #sys.exit(3)

    try:
        #mill.start()
        for cmd in cmds:
            cmd = cmd.strip()
            if not cmd.startswith('#'):
                mill.send(cmd)
            #mill.redraw_queue()
            mill.wait_for_idle()

        #def alrm(signum, frame):
        #    return

        #signal.signal(signal.SIGVTALRM, alrm)
        #signal.setitimer(signal.ITIMER_VIRTUAL, 1, 1)

        #while True:
        #    #mill.quiesce(2)
        #    if len(mill.queue) == 0 and mill.numsent == 0:
        #        time.sleep(0.5)
        #        mill.redraw_queue()
        #        mill.wait_for_idle()
        #        break
        #    mill.mainloop()
        #    if mill.numsent >= mill.maxsent:
        #        mill.process_queue()
    except KeyboardInterrupt:
        signal.alarm(0)
        pdb.set_trace()
        pass
    except:
        raise
    #print("Queue depth is %d numsent is %d, job is done." % (len(mill.queue),
    #    mill.numsent))
