#!/usr/bin/python3

import os
import sys
import tty
import pdb
import time
import feedmejack as fmj
from feedmejack.utility import *

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings())
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_position_settings(label='start',
                                                  settings=settings)
    settings = fmj.settings.parse_position_settings(label='end',
                                                  settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": True,
              "debug": False,
              "dryrun": False,
              "raise_z": True,
              "step": clean(0.1),
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    mill = fmj.Mill(settings=settings)
    if not settings.dryrun:
        mill.reset()
        mill.setup()

    f = Decimal(settings.feed,"100000")
    z_start = settings.start_z
    z_end = settings.end_z
    z_step = clean(settings.step, "1.000")
    if settings.debug:
        z_start = clean("50.000")
        z_end = clean("50.000")
        f *= clean(20, "100000")

    r = tool.radius
    w = tool.diameter
    #x_start = clean(settings.start_x - r * Decimal(1.05))
    #x_end = clean(settings.end_x + r * Decimal(1.05))
    #y_start = clean(settings.start_y - r * Decimal(1.05))
    #y_end = clean(settings.end_y + r * Decimal(1.05))
    x_start = settings.start_x
    x_end = settings.end_x
    y_start = settings.start_y
    y_end = settings.end_y

    coords = []
    if settings.raise_z:
        coords += [
            [{'z':50}, mill.gcode.G0, None],
            [{'x':x_start, 'y': y_start, 'z':50}, mill.gcode.G0, None],
            ]

    coords += [
        [{'z':z_start + z_step}, mill.gcode.G0, None],
        [{'x':x_start, 'y': y_start, 'z':z_start+z_step}, mill.gcode.G0, None],
        ]

    for z1, z0 in sweep(z_start, z_end, -abs(z_step), "100.00"):
        for y in frange(y_start, y_end,
                        clean(w * clean("0.95","1.00")), "100.00"):
            coords += [
                [{'x':x_start, 'y':y, 'z':z1}, mill.gcode.G1, f],
                [{'x':x_end, 'y':y, 'z':z0}, mill.gcode.G1, f],
                [{'x':x_start, 'y':y, 'z':z0}, mill.gcode.G1, f],
                ]

#        coords += [
#            [{'z':z1}, mill.gcode.G0, None],
#            [{'x':x_start, 'y':y_start, 'z':z1}, mill.gcode.G1, f],
#            [{'x':x_start, 'y':y_end, 'z':z0}, mill.gcode.G1, f/2],
#            [{'x':x_end, 'y':y_end, 'z':z1}, mill.gcode.G1, f],
#            [{'x':x_end, 'y':y_start, 'z':z0}, mill.gcode.G1, f/2],
#            [{'x':x_start, 'y':y_start, 'z':z0}, mill.gcode.G1, f],
#            [{'x':x_start, 'y':y_end, 'z':z1}, mill.gcode.G1, f/2],
#            [{'x':x_end, 'y':y_end, 'z':z0}, mill.gcode.G1, f],
#            [{'x':x_end, 'y':y_start, 'z':z1}, mill.gcode.G1, f/2],
#            [{'x':x_start, 'y':y_start, 'z':z0}, mill.gcode.G1, f],
#            ]

    cmds = []
    cmds.append(mill.gcode.F(f=f))

    for (a,cmd,f) in coords:
        if 'x' in a and 'y' in a and 'z' in a:
            pass
        kwargs = {'end': a}
        if f:
            kwargs['f'] = f
        c = cmd(**kwargs)
        cmds.append(c)

    if not settings.dryrun:
        mill.wait_for_idle()
    for cmd in cmds:
        print("%s" % (cmd,))
        if not settings.dryrun:
            mill.send(cmd)
            mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
    mill.end()
