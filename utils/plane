#!/usr/bin/python3

import os
import sys
import tty
import pdb
import time
import feedmejack as fmj
from fmj.utility import *
from decimal import Decimal

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings())
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_position_settings(label='start',
                                                  settings=settings)
    settings = fmj.settings.parse_position_settings(label='end',
                                                  settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": True,
              "debug": False,
              "dryrun": False,
              "step": clean(0.1),
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    if not settings.dryrun:
        mill = fmj.Mill(settings=settings)

        mill.reset()
        mill.setup()

    if debug:
        z_start = 50
        z_end = 50
        f *= 20

    r = clean(Decimal(tool.width) / Decimal(2))
    w = clean(tool.width)
    x_start = clean(x_start - r * Decimal(1.05))
    x_end = clean(x_end + r * Decimal(1.05))
    y_start = clean(y_start - r * Decimal(1.05))
    y_end = clean(y_end + r * Decimal(1.05))

    coords = [
        [{'z':50}, fmj.gcode.G0, None],
        [{'x':x_start, 'y': y_start, 'z':50}, fmj.gcode.G0, None],
        [{'x':x_start, 'y': y_start, 'z':z_start+z_step},
            fmj.gcode.G0, None],
        ]

    for z in frange(z_start, z_end, -z_step):
        for y in frange(y_start, y_end, r):
            coords += [
                [{'x':x_start, 'y':y, 'z':z+z_step}, fmj.gcode.G1, f],
                [{'x':x_end, 'y':y, 'z':z}, fmj.gcode.G1, f],
                [{'x':x_start, 'y':y, 'z':z}, fmj.gcode.G1, f],
                ]

        coords += [
            [{'z':z+z_step}, fmj.gcode.G0, None],
            [{'x':x_start, 'y':y_start, 'z':z+z_step}, fmj.gcode.G1, f],
            [{'x':x_start, 'y':y_end, 'z':z}, fmj.gcode.G1, f],
            [{'x':x_end, 'y':y_end, 'z':z+z_step}, fmj.gcode.G1, f],
            [{'x':x_end, 'y':y_start, 'z':z}, fmj.gcode.G1, f],
            [{'x':x_start, 'y':y_start, 'z':z}, fmj.gcode.G1, f],
            [{'x':x_start, 'y':y_end, 'z':z+z_step}, fmj.gcode.G1, f],
            [{'x':x_end, 'y':y_end, 'z':z}, fmj.gcode.G1, f],
            [{'x':x_end, 'y':y_start, 'z':z+z_step}, fmj.gcode.G1, f],
            [{'x':x_start, 'y':y_start, 'z':z}, fmj.gcode.G1, f],
            ]

    xz_variance = [0, -0.75]
    yz_variance = [0, -1.5]
    def adjust_z(x, y, z, debug=False):
        z = clean(z)
        if debug:
            print("x,y,z: (%s,%s,%s)" % (x,y,z))
        xzv = clean(Decimal(xz_variance[1]) - Decimal(xz_variance[0]))
        if debug:
            print("xzv: %s" % (xzv,))
        xzv *= Decimal(x)/Decimal(300)
        xzv = clean(xzv)
        if debug:
            print("xzv: %s" % (xzv,))

        yzv = clean(Decimal(yz_variance[1]) - Decimal(yz_variance[0]))
        if debug:
            print("yzv: %s" % (yzv,))
        yzv *= Decimal(y)/Decimal(300)
        yzv = clean(yzv)
        if debug:
            print("yzv: %s" % (yzv,))

        ret = clean(Decimal(z) + Decimal(sum([xzv, yzv])) / Decimal(2))
        if debug:
            print("ret z: %s" % (ret,))
        return ret

    cmds = []

    for (a,cmd,f) in coords:
        if 'x' in a and 'y' in a and 'z' in a:
            #a['z'] = adjust_z(**a)
            pass
        kwargs = {'end': a}
        if f:
            kwargs['f'] = f
        c = cmd(**kwargs)
        cmds.append(c)

    if not settings.dryrun:
        mill.wait_for_idle()
    for cmd in cmds:
        print("%s" % (cmd,))
        if not settings.dryrun:
            mill.send(cmd)
            mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
