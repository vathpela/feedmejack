#!/usr/bin/python3

import math
import pdb
import sys
import feedmejack as fmj
from feedmejack.utility import *
from decimal import Decimal

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings())
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": False,
              "debug": False,
              "dryrun": False,
              "raise_z": True,
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.parse_position_settings(optional=True,
                                                  settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    mill = fmj.Mill(settings=settings)

    if not settings.dryrun:
        mill.reset()
        mill.setup()

    cmds = []
    if not settings.feed in [None,math.inf]:
        code = mill.gcode.G0
        args = {}
    else:
        cmds.append(mill.gcode.F(f=settings.feed))
        code = mill.gcode.G1
        args = {'f':settings.feed}

    if settings.raise_z:
        cmd = mill.gcode.G0(end={'z':50})
        cmds.append(cmd)

    if settings.position_present:
        if settings.raise_z:
            cmd = code(end={'x':settings.x, 'y':settings.y}, **args)
            cmds.append(cmd)
            cmd = code(end={'z':settings.z}, **args)
            cmds.append(cmd)
        else:
            cmd = code(end={'x':settings.x, 'y':settings.y, 'z':settings.z},
                       **args)
            cmds.append(cmd)

    for cmd in cmds:
        print("%s" % (cmd,))
        if not settings.dryrun:
            mill.send(cmd)
            mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
