#!/usr/bin/python3

import os
import sys
import tty
import pdb
import time
import feedmejack as fmj
from feedmejack.utility import *

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings(feed=25))
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": False,
              "debug": False,
              "dryrun": False,
              "raise_z": True,
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.parse_position_settings(optional=True,
                                                  settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    mill = fmj.Mill(settings=settings)
    if not settings.dryrun:
        mill.reset()
        mill.setup()
        mill.wait_for_idle()

    cmds = []

    if settings.raise_z:
        cmds.append(mill.gcode.G0(end={'z':50}))

    f = settings.feed

    if settings.debug:
        z_offset = Decimal(10)
        f *= 5
    else:
        z_offset = Decimal(0)

    z_max = Decimal(22.6) + z_offset
    z_min = Decimal(19.35) + z_offset

    def sweep(x, y, r):
        p = None
        for n in frange(x, y, r):
            if p is None:
                p = n
                continue
            yield [p, n]
            p = n
        if not p is None:
            yield [y, y]

    cmds += [
        mill.gcode.F(f=f),
        mill.gcode.G0(end={'x':89.6, 'y':142}),
        mill.gcode.G0(end={'z':z_max * clean(1.1)}),
        mill.gcode.G1(end={'z':z_max}),
        ]
    for z1, z0 in sweep(z_max, z_min, Decimal(-0.2)):
        cmds += [
            mill.gcode.G1(end={'x':89.6, 'y':142, 'z':z1}),

            mill.gcode.G1(end={'x':89.6, 'y':115, 'z':z0}),
            mill.gcode.G0(end={'x':89.6, 'y':115, 'z':z1}),

            mill.gcode.G1(end={'x':90.6, 'y':115, 'z':z0}),
            mill.gcode.G0(end={'x':90.6, 'y':115, 'z':z1}),

            mill.gcode.G3(x=93.6, y=112, z=z0, i=3, j=0, f=f),
            mill.gcode.G0(end={'x':93.6, 'y':112, 'z':z1}),

            mill.gcode.G1(end={'x':146, 'y':112, 'z':z0}),

            mill.gcode.G1(end={'x':93.6, 'y':112, 'z':z0}),
            mill.gcode.G2(x=90.6, y=115, z=z0, i=0, j=3, f=f),
            mill.gcode.G1(end={'x':89.6, 'y':115, 'z':z0}),
            mill.gcode.G1(end={'x':89.6, 'y':142, 'z':z0}),
        ]

    for cmd in cmds:
        print("%s" % (cmd,))
        if not settings.dryrun:
            mill.send(cmd)
            mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
