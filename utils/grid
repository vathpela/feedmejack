#!/usr/bin/python3

import os
import sys
import tty
import pdb
import time
import feedmejack as fmj
from feedmejack.utility import *
from feedmejack.xyz import Point

if __name__ == '__main__':
    defaults = {}
    defaults.update(fmj.settings.default_tool_settings(feed=25))
    defaults.update(fmj.settings.default_position_settings(label='start',
                                                         x=10, y=10, z=50))
    defaults.update(fmj.settings.default_position_settings(label='end',
                                                         x=290, y=290, z=50))
    defaults.update(fmj.settings.default_comms_settings())

    settings = fmj.settings.Settings(d=defaults)
    settings = fmj.settings.parse_tool_settings(settings=settings)
    settings = fmj.settings.parse_comms_settings(settings=settings)

    others = {"home": True,
              "park": False,
              "debug": False,
              "dryrun": False,
              "raise_z": True,
              "stride": Decimal(10.0),
              }
    settings = fmj.settings.parse_settings(defaults=others, settings=settings)
    settings = fmj.settings.parse_position_settings(optional=True,
                                                  settings=settings)
    settings = fmj.settings.finalize(settings=settings)

    if len(sys.argv) > 1:
        print("what's up with this command line: %s" % (sys.argv,))
        sys.exit(1)

    tool = settings.tool
    print("tool: %s tool.z: %s" % (tool,tool.z))

    mill = fmj.Mill(settings=settings)
    if not settings.dryrun:
        mill.reset()
        mill.setup()
        mill.wait_for_idle()

    cmds = []

    if settings.raise_z:
        cmds.append(mill.gcode.G0(end={'z':50}))

    f = settings.feed

    if settings.debug:
        z_offset = Decimal(10)
        f *= 5
    else:
        z_offset = Decimal(0)

    z_max = settings.start_z + z_offset
    z_min = settings.end_z + z_offset

    x_min = settings.start_x
    if x_min % settings.stride != 0:
        x_min += settings.stride - (x_min % settings.stride)
    x_max = settings.end_x
    if x_max % settings.stride != 0:
        x_max -= x_max % settings.stride

    y_min = settings.start_x
    if y_min % settings.stride != 0:
        y_min += settings.stride - (y_min % settings.stride)
    y_max = settings.end_x
    if y_max % settings.stride != 0:
        y_max -= y_max % settings.stride

    cmds += [
        mill.gcode.F(f=f),
        mill.gcode.G0(end={'x':x_min, 'y':y_min}),
        mill.gcode.G0(end={'z':z_max * Decimal(1.1)}),
        mill.gcode.G1(end={'z':z_max}),
        ]
    points = []
    for x0, x1 in sweep(x_min, x_max, settings.stride):
        for y0, y1 in sweep(y_min, y_max, settings.stride):
            points += [
                Point(x0, y0, math.inf),
                Point(x0, y0),
                Point(x0, y1),
                Point(x0, y1, z=math.inf),
            ]

    for point in points:
        print("%s" % (point,))

    for cmd in cmds:
        print("%s" % (cmd,))
        #if not settings.dryrun:
        #    mill.send(cmd)
        #    mill.wait_for_idle()

    if settings.park and not settings.dryrun:
        mill.park()
    mill.end()
